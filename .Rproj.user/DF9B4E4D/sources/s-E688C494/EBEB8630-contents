---
title: 'MPT & Efficient Frontier'
author: MingHao
date: '2017-12-05'
slug: mpt-efficient-frontier
categories:
  - R
  - Finance
tags:
  - Efficient Frontier
  - Finance
  - CAPM
  - quantmod
  - PortfolioAnalytics
  - PerformanceAnalytics
  - timeseries
---

#[Modern Portfolio Theory (MPT)](https://www.investopedia.com/walkthrough/fund-guide/introduction/1/modern-portfolio-theory-mpt.aspx#ixzz50Mf3HHix )

# Introduction
The explanations are mostly adapted from Investopedia. On the technical side, there are five statistical risk measurements used in modern portfolio theory (MPT); 

1. *alpha*
2. *beta*
3. *R-squared* 
4. *standard deviation*
5. *Sharpe ratio*. 

Among which the *Standard Deviation *and *SharpeRatio* will be calculated in the following sections.

MPT suggested that it is possible to construct an "efficient frontier" of an optimal portfolio, whereby it is possible to calculate the maximum possible expected return for a given level of risk, this is done through diversification.

Through R packages such as **quantmod**, **PortfolioAnalytics** and **PerformanceAnalytics**, Stocks, Bounds and index data can be pulled for internet. Then, it can be analyzed and used to construct a custom portfolio that is tailored to specific cost and objectives.  The sections below show the process of calculating the Efficient Frontier.
# Packages used

```{r setup, warning = F, message=F}
require(PortfolioAnalytics)
require(PerformanceAnalytics)

require(quantmod)
require(zoo)
require(plotly)
require(data.table)

## for optimisation
# library(DEoptim)
# library(ROI)
# require(ROI.plugin.quadprog)
# require(ROI.plugin.glpk)

knitr::opts_chunk$set(results = 'hold', echo = T)
```

# Data Input

Selecting the 5 biggest technology stocks and GSPC(S&P500), HSI(HK index) and STI(SG Index) as inputs.

```{r , message=FALSE, warning = FALSE}
# Get financial data(adjusted returns are what we are after) with quantmod with yahoo
# Alternatively, quantmod appears to play well with quanda and google as well

# for the 5 horsemen of the techpocalyse + S&P index
getSymbols(c("MSFT", "GOOGL", "AAPL",  "AMZN", "FB", "^GSPC", "^HSI", "^STI"), src="yahoo", auto.assign=TRUE)
 # from="2007-01-01"  # by default

# Assign to dataframe
# for data from yahoo the adjusted close price is at the 6th column
prices.data <- merge.zoo(MSFT[,6], GOOGL[,6], AAPL[,6], AMZN[,6], FB[,6], GSPC[,6], HSI[,6], STI[,6])
# note that for the current version of quantmod, the adjusted close column appears to no longer include dividend adjustments

# Calculate returns
returns.data <- CalculateReturns(prices.data) # this use the basic lag function, which will run into issue with tidy verse
# note there is two commonly two ways to calculate returns, one is arithmetic and the other is logarithmic
# by default, CalculateReturns() function use arithmetic
returns.data <- na.omit(returns.data)

# Set names
colnames(returns.data) <- c("MSFT", "GOOGL", "AAPL", "AMZN", "FB", "^GSPC", "^HSI", "^STI")

```

## Return and Risk explanation
two common methods to calculate return

* Arithmetic Way

$r_t =  \frac{P_t-P_{t-1}}{P_{t-1}} = \frac{P_t}{P_{t-1}}-1$

* logarithmic way

$r_t = \log{\frac{P_t}{P_{t-1}}} = \log{P}- \log{P_{t-1}}$

While there are various methods to characterize risk, the most popular parameter is the Standard deviation, that which will be explored in the following sections, it is important to note that risk can be measured in other methods too. Such as 

From [Investopedia](https://www.investopedia.com/walkthrough/fund-guide/uit-hedge-fund-reit/hf/standard-deviation-value-at-risk.aspx#ixzz4zyeSc7PJ) 

* Standard Deviation(StdDev)

The most common risk measure used in both hedge fund and mutual fund evaluations is the standard deviation. The standard deviation, in this case, is the level of volatility of returns measured in percentage terms, and usually provided on an annual basis. Standard deviation gives a good indication of the variability of annual returns and makes it easy to compare to other funds when combined with annual return data

* Value At Risk(VAR)

VaR measures the dollar-loss expectation that can occur with a 5% probability. It adds another dimension because it makes it possible to compare two funds with different average returns and standard deviation. VaR would indicate the dollar amount of loss that is possible with each fund with a 5% probability.

Put another way, VaR would tell you with 95% confidence that your losses would not exceed a certain point. (You can never be 100% confident that you won't lose an entire investment.) It tries to answer the question "Given an investment of a particular return and volatility, what's the worst that could happen?"

* [Expected Shortfall(ES)](https://en.wikipedia.org/wiki/Expected_shortfall)

Expected Shortfall (ES) is a risk measure-a concept used in the field of financial risk measurement to evaluate the market risk or credit risk of a portfolio. The "expected shortfall at q% level" is the expected return on the portfolio in the worst {\displaystyle q} q% of cases. ES is an alternative to value at risk that is more sensitive to the shape of the tail of the loss distribution.
Expected shortfall is also called conditional value at risk (CVaR), average value at risk (AVaR), and expected tail loss (ETL).

# Defining some portfolio parameters

A single item is thus restricted take a between 0.05 to 0.45 portion of the portfolio. The portfolio is specified to be a full investment.


```{r}
# initial portfolio object
init <- portfolio.spec(assets=colnames(returns.data))
# initial constraints
init <- add.constraint(portfolio=init, type="full_investment")
# init <- add.constraint(portfolio=init, type="long_only")
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.45)
# init <- add.constraint(portfolio=init, type="group",
#                        groups=list(c(1, 3),
#                                    c(2, 4, 5)),
#                        group_min=0.05,
#                        group_max=0.7)
```

#Optimization and Calculation

## Optimize the portfolio using random

```{r, warning = F, message = F}
## A more Conventional approach is treating risk as StdDev
## Creates a new portfolio object using portf and adds StdDev as an objective
meanstd.portf <- add.objective(portfolio=init, type="risk", name="StdDev") %>%
  add.objective(portfolio=., type="return", name="mean")

opt <- optimize.portfolio(returns.data, meanstd.portf, optimize_method="random", trace=T, search_size = 20000) 

chart.RiskReward(opt, risk.col="StdDev", return.col="mean",  chart.assets = F)

```


 
```{r, message = F, warning = F}
meanvar.ef<- create.EfficientFrontier(R=returns.data, portfolio=meanstd.portf, type="mean-var", n.portfolios = 50)
# summary(meanStd, digits=2)


# The RAR.text argument can be used for the risk-adjusted-return name on the legend,
# by default it is 'Modified Sharpe Ratio'
chart.EfficientFrontier(meanvar.ef, match.col="StdDev", type="l", RAR.text="Sharpe Ratio", pch=4, rf = 0.01/12)

```

### Sharpe Ratio

“The Sharpe ratio characterizes how well the return of an asset compensates the investor for the risk taken”.  The higher Sharpe Ratio means the better investment option. In a set of risky assets, we can find the optimal portfolio asset allocations so that the Sharpe Ration is the largest.

In another word, The Sharpe ratio is simply the return per unit of risk (represented by variability).

### [Capital Market Line - CML](https://www.investopedia.com/terms/c/cml.asp#ixzz50HrdP9xA)

The capital market line (CML) appears in the capital asset pricing model to depict the rates of return for efficient portfolios subject to the risk level (standard deviation) for a market portfolio and the risk-free rate of return.

The capital market line is created by sketching a tangent line from the intercept point on the efficient frontier to the place where the expected return on a holding equals the risk-free rate of return. However, the CML is better than the efficient frontier because it considers the infusion of a risk-free asset in the market portfolio.


```{r, message = F, warning = F, results = 'hide'}
# extracting resutls from the class "frontier", extractStats() doesn't work for frontier class
meanvar.ef.allocation<-as.data.frame(summary(meanvar.ef)[[1]])
meanvar.ef.output<-as.data.frame(summary(meanvar.ef)[[2]])

# setting the row name as id for the output
meanvar.ef.output$id <-as.integer(row.names(meanvar.ef.output))
meanvar.ef.allocation$id <-as.integer(row.names(meanvar.ef.allocation))

#calculate the ShapeRatio for the EF outuput
setDT(meanvar.ef.output)[, SharpeRatio:= mean / StdDev]


## contructing CML line
MaxSharpe<-meanvar.ef.output[SharpeRatio==max(SharpeRatio)]
risk_free_rate= 0.01/12 # bound/ FD

ratio<-seq(0,1,0.1)

CML<- data.table(
CML_return=MaxSharpe$mean*ratio + risk_free_rate*(1-ratio),
CML_risk = MaxSharpe$StdDev*ratio
)
```


# Plotting the results with plotly

Note that the mean returns and standard deviation depicted here are monthly figures

this plot setup is inspired by https://moderndata.plot.ly/portfolio-optimization-using-r-and-plotly/.

```{r plotly1, warning = F, message = F, fig.height = 5, fig.width = 8}

ex <- data.frame(extractStats(opt))
# data.frame(extractStats(meanvar.ef))

plot_ly(data =meanvar.ef.output, x = ~StdDev, y = ~mean, color = ~SharpeRatio, mode = "markers", showlegend = F, 
             type = "scatter",  inherit = F) %>% 
  
  add_trace(data = ex, x = ~StdDev, y = ~mean, mode = "markers", showlegend = F, marker = list(color = "#F7C873", size = 5),
             type = "scatter") %>% 
  
  add_lines(data = CML, x= ~CML_risk, y = ~CML_return)%>%
  
  layout(title = "Random Portfolios with Plotly",
         yaxis = list(title = "Mean Returns", tickformat = ".2%"),
         xaxis = list(title = "Standard Deviation", tickformat = ".2%"),
         paper_bgcolor = 'rgb(248, 248, 255)',
         plot_bgcolor = 'rgb(248, 248, 255)',
         legend = list(x = 0.029, y = 1.038,
                       font = list(size = 10)))

```

# Allocation of investment among the Efficient Frontier

The portfolio across the *Efficient Frontier* can be visuallised as follow, along with the **Sharpe Ratio** of that particular setup for portfolio.

```{r plotly2, warning = F, message = F, fig.height = 5, fig.width = 8}

meanvar.ef.allocation.melt <- reshape2::melt(meanvar.ef.allocation, id.vars=c("id"))
 
plot_ly(meanvar.ef.allocation.melt, x = ~id, y = ~value,  color = ~variable, type = "bar") %>%
  
  add_trace(data = meanvar.ef.output, x = ~id, y = ~SharpeRatio, type = 'scatter', mode = 'lines', name = 'SharpeRatio',
            yaxis = 'y2',
            line = list(color = '#45171D'),
            hoverinfo = "text",
            text = ~paste(SharpeRatio), inherit = F) %>%
  
  layout(title = "Portfolio weights across frontier", barmode = "stack",
         xaxis = list(title = "Index"),
         yaxis = list(title = "Weights(%)", tickformat = ".0%"),
         yaxis2 = list(side = 'right', overlaying = "y", title = 'SharpeRatio', showgrid = FALSE, zeroline = FALSE),
         legend = list(x = 0.029, y = 1.038,
                       font = list(size = 10)),
         margin = list(l = 100, r = 50, t = 70, b = 70),
         paper_bgcolor = 'rgb(248, 248, 255)',
         plot_bgcolor = 'rgb(248, 248, 255)')


```

## Custom cost and return for portfolio optimization

Below show the optimization of the portfolio using a custom function, in this case, the annual mean and std. 
this is adapted and slightly modified from https://stat.ethz.ch/pipermail/r-sig-finance/2016q1/013817.html

```{r}

# Define mean PA function
Annualmean <- function(R, weights, n=60, geometric=FALSE){
as.vector(sum(Return.annualized(xts::last(R,n), geometric=geometric)*weights))
}

# Define std annually function
Annualsd <- function(R, weights=NULL){
as.numeric(StdDev(R=R, weights=weights)*sqrt(12)) # hardcoded for monthly data
}

#annualized return
meanstd.portf <- add.objective(portfolio=meanstd.portf,
type="return", # the kind of objective this is
name="Annualmean", # name of the function
multiplier=1 # use it in the objective
)

#annualized standard deviation
meanstd.portf <- add.objective(portfolio=meanstd.portf,
type="risk", # the kind of objective this is
name="Annualsd", # to minimize from the sample
multiplier=1 #  use it in the objective
)


 # make sure to run with trace=TRUE for the extract stats output
opt <- optimize.portfolio(returns.data, meanstd.portf, optimize_method="random", trace=TRUE) 
chart.RiskReward(opt, risk.col="Annualsd.Annualsd", return.col="Annualmean.Annualmean")

```

